"""
Very minimal stub file with just the types I need for Advent of Code
"""

class BoolRef:
    def __eq__(self, other: BoolRef | bool) -> BoolRef: ...
    def __ne__(self, other: BoolRef | bool) -> BoolRef: ...

class ArithRef:
    """Integer and Real expressions."""

    def __add__(self, other: ArithRef | int) -> ArithRef: ...
    def __radd__(self, other: ArithRef | int) -> ArithRef: ...
    def __mul__(self, other: ArithRef | int) -> ArithRef: ...
    def __rmul__(self, other: ArithRef | int) -> ArithRef: ...
    def __sub__(self, other: ArithRef | int) -> ArithRef: ...
    def __rsub__(self, other: ArithRef | int) -> ArithRef: ...
    def __div__(self, other: ArithRef | int) -> ArithRef: ...
    def __truediv__(self, other: ArithRef | int) -> ArithRef: ...
    def __rdiv__(self, other: ArithRef | int) -> ArithRef: ...
    def __rtruediv__(self, other: ArithRef | int) -> ArithRef: ...
    def __mod__(self, other: ArithRef | int) -> ArithRef: ...
    def __rmod__(self, other: ArithRef | int) -> ArithRef: ...
    def __neg__(self) -> ArithRef: ...
    def __pos__(self) -> ArithRef: ...
    def __eq__(self, other: ArithRef | int) -> BoolRef: ...
    def __ne__(self, other: ArithRef | int) -> BoolRef: ...
    def __le__(self, other: ArithRef | int) -> BoolRef: ...
    def __lt__(self, other: ArithRef | int) -> BoolRef: ...
    def __gt__(self, other: ArithRef | int) -> BoolRef: ...
    def __ge__(self, other: ArithRef | int) -> BoolRef: ...

def Int(name: str) -> ArithRef: ...
def Ints(names: str) -> list[ArithRef]: ...
def And(*args: BoolRef) -> BoolRef: ...
def Or(*args: BoolRef) -> BoolRef: ...
def Distinct(*args: ArithRef) -> BoolRef: ...

class CheckSatResult: ...

sat: CheckSatResult
unsat: CheckSatResult
unknown: CheckSatResult

class IntNumRef(ArithRef):
    def as_long(self) -> int: ...

class ModelRef:
    def __getitem__(self, idx: ArithRef) -> IntNumRef: ...

class Solver:
    def push(self) -> None: ...
    def pop(self) -> None: ...
    def add(self, *args: BoolRef) -> None: ...
    def check(self) -> CheckSatResult: ...
    def model(self) -> ModelRef: ...

def solve(*args: BoolRef) -> None: ...
def If(cond: BoolRef, t: ArithRef | int, f: ArithRef | int) -> ArithRef: ...
